import unittest
import torch
from model import HGNNLayer


class MyTestCase(unittest.TestCase):

    def test_message_passing(self):
        base_dim = 16
        x = torch.ones(base_dim)
        x = torch.diag(x)
        test_num_edge_types_by_shape = {1: 3, 2: 3, 3: 3}

        test_hyperedge_type = {1: torch.tensor([1, 1, 1, 1, 2, 2]), 2: torch.tensor([0, 0, 2]), 3: torch.tensor([0, 1])}
        test_hyperedge_index = {1: torch.tensor([[0, 1, 2, 3, 4, 5],
                                                 [5, 5, 7, 9, 9, 10]], dtype=torch.long),
                                2: torch.tensor([[0, 1, 3, 4, 6, 7],
                                                 [2, 2, 2, 2, 8, 8]], dtype=torch.long),
                                3: torch.tensor([[9, 10, 11, 11, 13, 14],
                                                 [12, 12, 12, 15, 15, 15]], dtype=torch.long)}

        layer = HGNNLayer(base_dim, base_dim, test_num_edge_types_by_shape)
        layer.C.weight.data = torch.diag(torch.ones(base_dim))
        layer.C.bias.data = torch.zeros(base_dim)
        for shape in test_num_edge_types_by_shape:
            layer.A[str(shape)].data = torch.diag(torch.ones(base_dim)).repeat(shape, 1).repeat(
                test_num_edge_types_by_shape[shape], 1, 1)

        out = layer(x, test_hyperedge_index, test_hyperedge_type)
        self.assertTrue(torch.equal(out, torch.tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5000, 0.5000, 1.0000, 0.5000, 0.5000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5000, 0.5000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 1.0000, 0.0000, 1.0000, 1.0000, 1.0000]])))


if __name__ == '__main__':
    unittest.main()
